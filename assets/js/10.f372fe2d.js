(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{421:function(t,e,a){"use strict";a.r(e);var v=a(2),_=Object(v.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),e("h2",{attrs:{id:"环境配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#环境配置"}},[t._v("#")]),t._v(" 环境配置")]),t._v(" "),e("h2",{attrs:{id:"常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),e("p",[t._v("Git命令：")]),t._v(" "),e("p",[t._v("添加提交："),e("code",[t._v('git add file git commit -m "注释"')])]),t._v(" "),e("p",[t._v("查看状态："),e("code",[t._v("git status")])]),t._v(" "),e("p",[t._v("比较差异："),e("code",[t._v("git diff")])]),t._v(" "),e("p",[t._v("历史记录："),e("code",[t._v("git log --graph")])]),t._v(" "),e("p",[t._v("回退到上一版本："),e("code",[t._v("git reset --hard HEAD^")])]),t._v(" "),e("p",[t._v("回退到指定版本："),e("code",[t._v("git reset --hard 326123")])]),t._v(" "),e("p",[t._v("查看命令历史："),e("code",[t._v("git reflog")])]),t._v(" "),e("p",[t._v("丢弃工作区修改："),e("code",[t._v("git checkout -- readme.txt")])]),t._v(" "),e("p",[t._v("丢弃暂存区的修改："),e("code",[t._v("git reset HEAD readme.txt")])]),t._v(" "),e("p",[t._v("创建远程仓库并关联："),e("code",[t._v("git remote add origin git@github.com:michaelliao/learngit.git")])]),t._v(" "),e("p",[t._v("将本地master推送到远程："),e("code",[t._v("git push -u origin master")])]),t._v(" "),e("p",[t._v("克隆项目："),e("code",[t._v("git clone git@github.com:xxx")])]),t._v(" "),e("p",[t._v("查看分⽀："),e("code",[t._v("git branch")])]),t._v(" "),e("p",[t._v("创建分⽀："),e("code",[t._v("git branch name")])]),t._v(" "),e("p",[t._v("切换分⽀："),e("code",[t._v("git checkout name")])]),t._v(" "),e("p",[t._v("创建+切换分⽀："),e("code",[t._v("git checkout -b name")])]),t._v(" "),e("p",[t._v("合并某分⽀到当前分⽀："),e("code",[t._v("git merge name")])]),t._v(" "),e("p",[t._v("删除分⽀："),e("code",[t._v("git branch -d name")])]),t._v(" "),e("p",[t._v("强制删除分支："),e("code",[t._v("git branch -D feature-vulcan")])]),t._v(" "),e("p",[t._v("查看stash存储区："),e("code",[t._v("git stash list")]),t._v("\n修复bug时，我们会通过创建新的bug分⽀进⾏修复，然后合并，最后删除；\n当⼿头⼯作没有完成时，先把⼯作现场"),e("code",[t._v("git stash")]),t._v("⼀下，然后去修复bug，修复后，再"),e("code",[t._v("git stash pop")]),t._v("，回到⼯作现场")]),t._v(" "),e("p",[t._v("查看远程库信息，使⽤："),e("code",[t._v("git remote -v")]),t._v("；")]),t._v(" "),e("p",[t._v("从本地推送分⽀，使⽤："),e("code",[t._v("git push origin branch-name")]),t._v("，")]),t._v(" "),e("p",[t._v("在本地创建和远程分⽀对应的分⽀使⽤："),e("code",[t._v("git checkout -b branch-name origin/branchname")]),t._v("，")]),t._v(" "),e("p",[t._v("本地和远程分⽀的名称最好一致，建⽴本地分⽀和远程分⽀的关联，  使⽤："),e("code",[t._v("git branch --set-upstream branch-name origin/branch-name")]),t._v("；")]),t._v(" "),e("p",[t._v("从远程抓取分⽀，使⽤git pull，如果有冲突，要先处理冲突命令"),e("code",[t._v("git tag name")]),t._v("⽤于新建⼀个标签，默认为HEAD，也可以指定⼀个commit id；")]),t._v(" "),e("p",[t._v("标签：\n可以查看所有标签:"),e("code",[t._v("git tag")])]),t._v(" "),e("p",[t._v("切换到分支"),e("code",[t._v("git checkout bracnname")]),t._v(",打标签 "),e("code",[t._v("git tag name")])]),t._v(" "),e("p",[t._v("默认标签是打在最新提交的commit上的,历史提交的commit id,打标签 "),e("code",[t._v("git tag tagname id12321")])]),t._v(" "),e("p",[t._v("创建带有说明的标签,指定标签信息:"),e("code",[t._v('git tag -a tagname -m "blablabla..."')])]),t._v(" "),e("p",[t._v("推送⼀个本地标签:"),e("code",[t._v("git push origin tagname")])]),t._v(" "),e("p",[t._v("推送全部未推送过的本地标签:"),e("code",[t._v("git push origin --tags")])]),t._v(" "),e("p",[t._v("删除⼀个本地标签:"),e("code",[t._v("git tag -d tagname")])]),t._v(" "),e("p",[t._v("删除⼀个远程标签:"),e("code",[t._v("git push origin :refs/tags/tagname")])]),t._v(" "),e("p",[t._v("创建项目并与远程关联")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('git init   // 1. 初始化项目文件夹\n \ngit add .  // 2. 将所有文件添加到暂存区\n \ngit commit -m "first commit"   // 3. 提交到本地仓库，双引号内是提交的备注信息\n \ngit remote add origin XXX     //  4. （XXX就是你github或者码云等远程仓库的地址，git branch这个命令可以看到你所在的分支，删除某个仓库地址使用git remote rm origin）\n \ngit pull    // 5. 拉取远程主分支信息，首次拉取合并信息\n \ngit push -u -f origin master  // 6. 提交到远程仓库，这个命令中的 -f 是强制推送，因为远程仓库只有初始化的文件，所以强制推送上去就行了，不加-f 会报当前分支没有远程分支，强制推送可以覆盖master，这样就完成了第一次提交的步骤)\n')])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br")])]),e("p",[t._v("在GitHub上，可以任意Fork开源仓库；\n• ⾃⼰拥有Fork后的仓库的读写权限；\n• 可以推送pull request给官⽅仓库来贡献代码。")])])}),[],!1,null,null,null);e.default=_.exports}}]);